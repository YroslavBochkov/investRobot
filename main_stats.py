from robotlib.stats import BalanceProcessor, BalanceCalculator, TradeStatisticsAnalyzer


def print_stats(stats_path, label):
    try:
        stats = TradeStatisticsAnalyzer.load_from_file(stats_path)
    except FileNotFoundError:
        print(f"–§–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {stats_path}")
        print("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–æ–±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    short, full = stats.get_report(processors=[BalanceProcessor()], calculators=[BalanceCalculator()])

    print(f"\n=== {label} ===")
    print(full)
    print(short)

    income = short.get("income", 0)
    commission = short.get("total_commission", 0)
    if income > 0:
        print(f"\n‚úÖ –í–´ –ó–ê–†–ê–ë–û–¢–ê–õ–ò (—Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏): {income:.2f} —Ä—É–±.")
    elif income < 0:
        print(f"\n‚ùå –í–´ –ü–û–¢–ï–†–Ø–õ–ò (—Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏): {abs(income):.2f} —Ä—É–±.")
    else:
        print("\n‚ÑπÔ∏è  –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥: 0 —Ä—É–±.")
    print(f"üí∏ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é: {commission:.2f} —Ä—É–±.")

def main():
    tickers = [
        ('MTSS', '–ú–¢–°'),
        ('MOEX', '–ú–æ—Å–±–∏—Ä–∂–∞'),
        ('VKCO', '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ'),
        ('OZON', '–û–∑–æ–Ω'),
        ('SBER', '–°–±–µ—Ä–±–∞–Ω–∫'),
        ('GAZP', '–ì–∞–∑–ø—Ä–æ–º'),
        ('LKOH', '–õ—É–∫–æ–π–ª'),
        ('GMKN', '–ù–æ—Ä–Ω–∏–∫–µ–ª—å'),
        ('NVTK', '–ù–æ–≤–∞—Ç—ç–∫'),
        ('PLZL', '–ü–æ–ª—é—Å'),
        ('ROSN', '–†–æ—Å–Ω–µ—Ñ—Ç—å'),
        ('TATN', '–¢–∞—Ç–Ω–µ—Ñ—Ç—å'),
        ('CHMF', '–°–µ–≤–µ—Ä—Å—Ç–∞–ª—å'),
    ]
    open_positions = []
    for ticker, label in tickers:
        stats_path = f'/Users/yaroslav/–ü–µ—Ç–ø—Ä–æ–µ–∫—Ç/investRobot/stats_{ticker}.pickle'
        try:
            from robotlib.stats import TradeStatisticsAnalyzer, BalanceProcessor, BalanceCalculator
            stats = TradeStatisticsAnalyzer.load_from_file(stats_path)
            short, _ = stats.get_report(processors=[BalanceProcessor()], calculators=[BalanceCalculator()])
            if short.get('final_instrument_balance', 0) > 0:
                open_positions.append((label, short['final_instrument_balance']))
        except Exception:
            continue

    print("–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
    if open_positions:
        for label, lots in open_positions:
            print(f"- {label}: {lots} –ª–æ—Ç(–æ–≤)")
    else:
        print("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")

    # –°—Ç–∞—Ä—ã–π –≤—ã–≤–æ–¥ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    for ticker, label in tickers:
        print_stats(f'/Users/yaroslav/–ü–µ—Ç–ø—Ä–æ–µ–∫—Ç/investRobot/stats_{ticker}.pickle', label)

if __name__ == '__main__':
    main()
